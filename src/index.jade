doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
		title RobotC basics

		link(rel='stylesheet', type='text/css', href='build/build.css')

	body

		article.language-clike

			section
				h1 RobotC basics
				h3 Written Halloween 2014, presented on November 1, by AJ

			section
				h1 Programming fundamentals

			section
				h2.bullet Basic program structure
				h3.bullet RobotC programs are basically a sequence of statements that the computer (NXT) will run. Whitespace doesn't matter.
				h3.bullet The next statement doesn't start until the previous statement finishes, unless you explicitly say otherwise.
				h3.bullet There are two types of statements: command statements, and flow control statements

			section
				h2.bullet Command statements
				h3.bullet Command statements are basically <em>actions</em>. They <em>do</em> something, like initializing a variable or moving a motor.
				h3.bullet Command statements are terminated by <code>;</code>s.

			section
				h2.bullet Control flow statements
				h3.bullet Control flow statements control the <em>flow</em> of the program (semi-obviously).
				h3.bullet For example, the <code>if</code> statement controls whether or not a collection of statements run, based on a condition.
				h3.bullet Control flow statements look like this: <code>statement (parameter) { action; action; action; }</code>
				h3.bullet Let's just look at an example.

			section(data-bespoke-backdrop='emphatic')
				pre
					code.
						// declare (initialize) a variable
						bool continue = true;
						&nbsp;
						while (continue)
						{
							/*
								this is a contrived example. usually you would
								just put `someVariable <= 5` in the while loop.
							*/
							if (someVariable <= 5)
							{
								continue = false;
							}
						}

			section
				h2.bullet Common control flow statements
				h3.bullet <code>if (condition) {}</code>
				h3.bullet <code>while (condition) {}</code>
				h3.bullet <code>for (initialCommand; condition; endCommand) {}</code>

			section
				h1 Ancillary concepts

			section
				h2.bullet Application code
				h3.bullet This is a fancy term for situation-specific code.
				h3.bullet Application code is code that contains the logic specific to whatever problem you're trying to solve.
				h3.bullet For example, a robot's teliop, or a particular autonomous routine.

			section
				h2.bullet Libraries
				h3.bullet A library is a unit of code that's designed to be reused.
				h3.bullet Libraries cannot be compiled on their own, instead, application programs use them
				h3.bullet Libraries are good because they reduce code duplication, which means less work for everyone

			section
				h2.bullet APIs
				h3.bullet An API, or Application Programming Interface, is a collection of command statements that work with a certain <em>thing</em>
				h3.bullet For example: "the motors API"
				h3.bullet Other favorites include the Bluetooth API, the NXT Screen API and the Tasks API
				h3.bullet If you want to seriously program with RobotC you will want to use the <a href="https://github.com/saasrobotics/Libraries">APIs that we have written</a>
				h3.bullet If you just want to move a prototype's motors, you'll want to use the RobotC APIs. See <a href="http://www.robotc.net/wiki/NXT_Motors_and_Servos_Overview">motors and servos</a> on the RobotC wiki

			section
				h2.bullet Things I haven't covered
				h3.bullet Functions
				h3.bullet Variable types
				h3.bullet Conditionals
				h3.bullet <code>#includes</code>
				h3.bullet <code>switch</code> statements
				h3.bullet I don't want to take up too much time with these, but if they interest you, talk to me! I'll teach you about them.

		script(src='build/build.js')